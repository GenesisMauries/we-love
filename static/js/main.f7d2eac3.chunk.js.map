{"version":3,"sources":["components/form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getUser","type","name","App","state","users","_callee","e","userName","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","toLowerCase","console","log","preventDefault","fetch","sent","json","_this","setState","stop","className","form_Form","this","map","user","key","id","src","download_url","alt","author","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRASeA,eAPF,SAACC,GAAD,OACTC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,SAClBJ,EAAAC,EAAAC,cAAA,SAAOG,KAAM,OAAOC,KAAK,aACzBN,EAAAC,EAAAC,cAAA,2BC+COK,6MA/CbC,MAAO,CACLC,MAAM,MAERL,8CAAQ,SAAAM,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAd,EAAAe,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACAP,EAAUD,EAAES,OAAOC,SAAST,SAASU,MAAMC,cACjDC,QAAQC,IAAIb,GACZD,EAAEe,iBAHIT,EAAAE,KAAA,EAIiBQ,MAAK,iDAJtB,cAIAd,EAJAI,EAAAW,KAAAX,EAAAE,KAAA,EAKaN,EAASgB,OALtB,OAKAf,EALAG,EAAAW,KAMNE,EAAKC,SAAU,CAACtB,MAAMK,IACtBU,QAAQC,IAAIK,EAAKtB,MAAMC,OAPjB,yBAAAQ,EAAAe,SAAAtB,oIAUN,OACEV,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAAA,UAAQ+B,UAAU,cAChBjC,EAAAC,EAAAC,cAAA,MAAI+B,UAAU,aAAd,mBAEFjC,EAAAC,EAAAC,cAACgC,EAAD,CAAM9B,QAAS+B,KAAK/B,UACnB+B,KAAK3B,MAAMC,MAAM2B,IAAI,SAACC,GACrB,OAAOrC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,iBAAiBK,IAAKD,EAAKE,IAC/CvC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,uCACbjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,QACbjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,kBACbjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,wBACbjC,EAAAC,EAAAC,cAAA,OAAMsC,IAAKH,EAAKI,aAAcR,UAAU,0BAA0BS,IAAI,eAExE1C,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,kBACbjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,aACbjC,EAAAC,EAAAC,cAAA,MAAI+B,UAAU,eAAd,IAA8BI,EAAKM,QACnC3C,EAAAC,EAAAC,cAAA,KAAG+B,UAAU,aAAb,sEAhCNW,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f7d2eac3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props)=>(\r\n    <form onSubmit={props.getUser}>\r\n        <input type= \"text\" name=\"userName\"/>\r\n        <button>Search</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Form from './components/form/Form'\nclass App extends Component {\n  state ={\n    users:[]\n  }\n  getUser=async (e)=>{\n    const userName= e.target.elements.userName.value.toLowerCase()\n    console.log(userName)\n    e.preventDefault()\n    const api_call = await fetch(`https://picsum.photos/v2/list?page=2&limit=15`)\n    const data = await api_call.json()\n    this.setState( {users:data})\n    console.log(this.state.users)\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">We love photos</h1>\n        </header>\n        <Form getUser={this.getUser} />\n        {this.state.users.map((user)=>{\n          return <div className=\"container mt-2\" key={user.id}>\n            <div className=\"row\">\n              <div className=\"col-lg-8 col-md-9 col-sm-10 mx-auto\">\n                <div className=\"card\" >\n                  <div className=\"row no-gutters\" >\n                    <div className=\"col-lg-3 text-center\">\n                      <img  src={user.download_url} className=\"img-fluid img-thumbnail\" alt=\"photoTake\"/>\n                    </div>\n                    <div className=\"text-left mt-2\">\n                      <div className=\"card-body\">\n                        <h4 className=\"card-title \">@{user.author}</h4>\n                        <p className=\"card-text\">Generalmente una fotograf√≠a habla por si sola.</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>   \n          </div>    \n        }\n      )\n    } \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}